@startuml
!pragma layout smetana
skinparam componentStyle rectangle
skinparam shadowing false
skinparam wrapWidth 200
title Auto-Agent â€” Architecture (Components)

package "Kubernetes Cluster" {
  node "Node A" { [Auto-Agent (DaemonSet)\nPod] as AgentA }
  node "Node B" { [Auto-Agent (DaemonSet)\nPod] as AgentB }
  node "Node C" { [Auto-Agent (DaemonSet)\nPod] as AgentC }

  [Leader Election\n(Lease)] as Leader
  [K8s API Server] as APIServer
  [AutoRemediationPolicy\nCRD + CRs] as ARP
  [Workloads\n(Deployments/RS/Pods)] as Apps
}

package "Observability" {
  [Prometheus\n(scrape & query)] as Prom
  [/metrics\n(agent self-metrics)] as Metrics
}

package "Integrations" {
  [Slack\n(Alerts & Approvals)] as Slack
  [LLM Service\n(RCA suggestions)] as LLM
  [GitOps Provider\n(GitHub/GitLab PRs)] as GitOps
  [Ticketing\n(Jira / GitHub Issues)] as Tickets
  [Log Storage\n(S3 / EFS)] as Storage
}

AgentA -[#blue]-> APIServer : Watch Pods/Nodes/Events
AgentB -[#blue]-> APIServer
AgentC -[#blue]-> APIServer
APIServer -[#blue]-> ARP : Watch/Cache CRDs

AgentA -[#green]-> Prom : Query CPU/latency/errors/queue
AgentB -[#green]-> Prom
AgentC -[#green]-> Prom
AgentA -[#green]-> Metrics : Expose /metrics
AgentB -[#green]-> Metrics
AgentC -[#green]-> Metrics

Leader -[#brown]-> AgentA : Cluster-wide actions
Leader -[#brown]-> AgentB
Leader -[#brown]-> AgentC

AgentA -[#purple]-> Slack : Incidents + summaries
AgentA -[#purple]-> LLM : RCA suggestions
AgentA -[#purple]-> Storage : Persist logs/events
AgentA -[#purple]-> GitOps : Open PRs (replicas/limits)
AgentA -[#purple]-> Tickets : Create/Update incidents

AgentA -[#red]-> APIServer : Delete stuck pod / Evict on pressure
Leader -[#red]-> APIServer : Scale up/down (HPA-safe)
APIServer -[#black]-> Apps : Recreate/scale workloads

note right of ARP
AutoRemediationPolicy
- targetSelector
- actions (scale/restart/bump)
- safety (cooldown/budgets)
- escalation (Slack/Tickets)
- anomalies (PromQL + z-score)
end note
@enduml
